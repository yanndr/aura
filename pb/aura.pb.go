// Code generated by protoc-gen-go. DO NOT EDIT.
// source: aura.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	aura.proto

It has these top-level messages:
	Task
	TemperatureRequest
	TemperatureReply
	UpdateTemperatureRequest
	UpdateTemperatureReply
	Void
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Unit int32

const (
	Unit_KELVIN     Unit = 0
	Unit_CELSIUS    Unit = 1
	Unit_FAHRENHEIT Unit = 2
)

var Unit_name = map[int32]string{
	0: "KELVIN",
	1: "CELSIUS",
	2: "FAHRENHEIT",
}
var Unit_value = map[string]int32{
	"KELVIN":     0,
	"CELSIUS":    1,
	"FAHRENHEIT": 2,
}

func (x Unit) String() string {
	return proto.EnumName(Unit_name, int32(x))
}
func (Unit) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Task struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Done bool   `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Task) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type TemperatureRequest struct {
}

func (m *TemperatureRequest) Reset()                    { *m = TemperatureRequest{} }
func (m *TemperatureRequest) String() string            { return proto.CompactTextString(m) }
func (*TemperatureRequest) ProtoMessage()               {}
func (*TemperatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TemperatureReply struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	Unit  Unit    `protobuf:"varint,2,opt,name=unit,enum=pb.Unit" json:"unit,omitempty"`
}

func (m *TemperatureReply) Reset()                    { *m = TemperatureReply{} }
func (m *TemperatureReply) String() string            { return proto.CompactTextString(m) }
func (*TemperatureReply) ProtoMessage()               {}
func (*TemperatureReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TemperatureReply) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TemperatureReply) GetUnit() Unit {
	if m != nil {
		return m.Unit
	}
	return Unit_KELVIN
}

type UpdateTemperatureRequest struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	Unit  Unit    `protobuf:"varint,2,opt,name=unit,enum=pb.Unit" json:"unit,omitempty"`
}

func (m *UpdateTemperatureRequest) Reset()                    { *m = UpdateTemperatureRequest{} }
func (m *UpdateTemperatureRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTemperatureRequest) ProtoMessage()               {}
func (*UpdateTemperatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateTemperatureRequest) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *UpdateTemperatureRequest) GetUnit() Unit {
	if m != nil {
		return m.Unit
	}
	return Unit_KELVIN
}

type UpdateTemperatureReply struct {
}

func (m *UpdateTemperatureReply) Reset()                    { *m = UpdateTemperatureReply{} }
func (m *UpdateTemperatureReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateTemperatureReply) ProtoMessage()               {}
func (*UpdateTemperatureReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*Task)(nil), "pb.Task")
	proto.RegisterType((*TemperatureRequest)(nil), "pb.TemperatureRequest")
	proto.RegisterType((*TemperatureReply)(nil), "pb.TemperatureReply")
	proto.RegisterType((*UpdateTemperatureRequest)(nil), "pb.UpdateTemperatureRequest")
	proto.RegisterType((*UpdateTemperatureReply)(nil), "pb.UpdateTemperatureReply")
	proto.RegisterType((*Void)(nil), "pb.Void")
	proto.RegisterEnum("pb.Unit", Unit_name, Unit_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Aura service

type AuraClient interface {
	GetTemperature(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (*TemperatureReply, error)
	UpdateTemperature(ctx context.Context, in *UpdateTemperatureRequest, opts ...grpc.CallOption) (*UpdateTemperatureReply, error)
}

type auraClient struct {
	cc *grpc.ClientConn
}

func NewAuraClient(cc *grpc.ClientConn) AuraClient {
	return &auraClient{cc}
}

func (c *auraClient) GetTemperature(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (*TemperatureReply, error) {
	out := new(TemperatureReply)
	err := grpc.Invoke(ctx, "/pb.aura/GetTemperature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auraClient) UpdateTemperature(ctx context.Context, in *UpdateTemperatureRequest, opts ...grpc.CallOption) (*UpdateTemperatureReply, error) {
	out := new(UpdateTemperatureReply)
	err := grpc.Invoke(ctx, "/pb.aura/UpdateTemperature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Aura service

type AuraServer interface {
	GetTemperature(context.Context, *TemperatureRequest) (*TemperatureReply, error)
	UpdateTemperature(context.Context, *UpdateTemperatureRequest) (*UpdateTemperatureReply, error)
}

func RegisterAuraServer(s *grpc.Server, srv AuraServer) {
	s.RegisterService(&_Aura_serviceDesc, srv)
}

func _Aura_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuraServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.aura/GetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuraServer).GetTemperature(ctx, req.(*TemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aura_UpdateTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuraServer).UpdateTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.aura/UpdateTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuraServer).UpdateTemperature(ctx, req.(*UpdateTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Aura_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.aura",
	HandlerType: (*AuraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemperature",
			Handler:    _Aura_GetTemperature_Handler,
		},
		{
			MethodName: "UpdateTemperature",
			Handler:    _Aura_UpdateTemperature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aura.proto",
}

func init() { proto.RegisterFile("aura.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0x61, 0x8d, 0x75, 0x84, 0x10, 0x87, 0x50, 0x42, 0xe8, 0xa1, 0xe4, 0x54, 0x3c,
	0x44, 0xa8, 0x2f, 0xa0, 0x48, 0x6a, 0x83, 0x25, 0xc2, 0x36, 0xe9, 0x7d, 0x43, 0xe6, 0x10, 0x8c,
	0xc9, 0x9a, 0x6e, 0xc4, 0x3e, 0x8a, 0x6f, 0x2b, 0x59, 0x2f, 0x4a, 0xec, 0xc5, 0xdb, 0xec, 0xb7,
	0xcb, 0x37, 0xff, 0xce, 0x00, 0xc8, 0xbe, 0x93, 0x91, 0xea, 0x5a, 0xdd, 0xa2, 0xa5, 0x8a, 0x30,
	0x02, 0x9e, 0xc9, 0xc3, 0x0b, 0x22, 0x70, 0x4d, 0x1f, 0xda, 0x67, 0x0b, 0xb6, 0xbc, 0x10, 0xa6,
	0x1e, 0x58, 0xd9, 0x36, 0xe4, 0x5b, 0x0b, 0xb6, 0x9c, 0x0a, 0x53, 0x87, 0x1e, 0x60, 0x46, 0xaf,
	0x8a, 0x3a, 0xa9, 0xfb, 0x8e, 0x04, 0xbd, 0xf5, 0x74, 0xd0, 0xe1, 0x1a, 0xdc, 0x5f, 0x54, 0xd5,
	0x47, 0xf4, 0xe0, 0xec, 0x5d, 0xd6, 0x3d, 0x19, 0x25, 0x13, 0xdf, 0x07, 0x9c, 0x03, 0xef, 0x9b,
	0x4a, 0x1b, 0xa7, 0xb3, 0x9a, 0x46, 0xaa, 0x88, 0xf2, 0xa6, 0xd2, 0xc2, 0xd0, 0x30, 0x05, 0x3f,
	0x57, 0xa5, 0xd4, 0x34, 0xee, 0xf1, 0x2f, 0x9f, 0x0f, 0xb3, 0x3f, 0x7c, 0xaa, 0x3e, 0x86, 0x36,
	0xf0, 0x7d, 0x5b, 0x95, 0xd7, 0x37, 0xc0, 0x87, 0xf7, 0x08, 0x60, 0x3f, 0xc5, 0xdb, 0x7d, 0x92,
	0xba, 0x13, 0xbc, 0x84, 0xf3, 0x87, 0x78, 0xbb, 0x4b, 0xf2, 0x9d, 0xcb, 0xd0, 0x01, 0x58, 0xdf,
	0x6f, 0x44, 0x9c, 0x6e, 0xe2, 0x24, 0x73, 0xad, 0xd5, 0x27, 0x03, 0x3e, 0xcc, 0x10, 0xef, 0xc0,
	0x79, 0x24, 0xfd, 0x43, 0x8c, 0xb3, 0xa1, 0xfb, 0x38, 0x79, 0xe0, 0x8d, 0xf8, 0x90, 0x60, 0x82,
	0xcf, 0x70, 0x35, 0x4a, 0x87, 0x73, 0xf3, 0x85, 0x13, 0x43, 0x08, 0x82, 0x13, 0xb7, 0x46, 0x58,
	0xd8, 0x66, 0xaf, 0xb7, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x40, 0xfe, 0x5a, 0xe5, 0x01,
	0x00, 0x00,
}
